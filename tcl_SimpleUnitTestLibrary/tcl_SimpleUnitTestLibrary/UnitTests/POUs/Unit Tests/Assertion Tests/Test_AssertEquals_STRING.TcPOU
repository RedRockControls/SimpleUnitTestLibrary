<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="Test_AssertEquals_STRING" Id="{db994c4a-d987-4378-af34-b707794fadd7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_AssertEquals_STRING EXTENDS T_UnitTestBase
VAR
    AssertionUnderTest : T_Assertion(AssertionListenerMock);
    AssertionListenerMock : T_AssertionListenerMock;
    STRING_Variable : STRING := 'Cucumber';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Initialise the classes under test (may be repaeting the tests)...
AssertionListenerMock.fb_Init(
    bInitRetains      := FALSE,
	bInCopyCode       := FALSE);
AssertionUnderTest.fb_Init(
    bInitRetains      := FALSE,
	bInCopyCode       := FALSE,
    AssertionListener := AssertionListenerMock);

// Test the assertion...
AssertionUnderTest.AssertEquals_STRING(
    Expected := 'Radish',
    Actual   := STRING_Variable,
    VariableName := 'STRING_Variable'); 
    
// Check the assertion worked...    
Assertion.AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := AssertionListenerMock.AssertionFailed,
    VariableName := 'AssertionListenerMock.AssertionFailed');

// Check the assertion messages...    
Assertion.AssertEquals_STRING(
    Expected := 'AssertEquals_STRING failed in AssertionListenerMock: Value "STRING_Variable"',
    Actual   := AssertionListenerMock.AssertionMessage,
    VariableName := 'AssertionListenerMock.AssertionMessage');

Assertion.AssertEquals_STRING(
    Expected := '  Expected = Radish',
    Actual   := AssertionListenerMock.ExpectedAsString,
    VariableName := 'AssertionListenerMock.ExpectedAsString');

Assertion.AssertEquals_STRING(
    Expected := '  Actual   = Cucumber',
    Actual   := AssertionListenerMock.ActualAsString,
    VariableName := 'AssertionListenerMock.ActualAsString');

TestFinished();    ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>