<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="Test_AssertEquals_DWORD" Id="{bea39ec3-b193-4bc4-b351-2e9c0b3dfb0b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_AssertEquals_DWORD EXTENDS TUnitTestBase
VAR
    AssertionUnderTest : TAssertion(AssertionListenerMock);
    AssertionListenerMock : TAssertionListenerMock;
    DWORD_Variable : DWORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AssertionListenerMock.AssertionFailed  := FALSE;
AssertionListenerMock.AssertionMessage := '';
AssertionListenerMock.ExpectedAsString := '';
AssertionListenerMock.ActualAsString   := '';

// Test the assertion...
DWORD_Variable := 1111;

AssertionUnderTest.AssertEquals_DWORD(
    Expected := 2222, // deliberately different to test the assertion
    Actual   := DWORD_Variable,
    ObjectName := 'AssertionTest',
    VariableName := 'DWORD_Variable');
 
    
// Check the assertion worked...    
Assertion.AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := AssertionListenerMock.AssertionFailed,
    ObjectName := _TestName,
    VariableName := 'AssertionListenerMock.AssertionFailed');

// Check the assertion messages...    
Assertion.AssertEquals_STRING(
    Expected := 'AssertEquals_DWORD failed in AssertionTest: Value "DWORD_Variable"',
    Actual   := AssertionListenerMock.AssertionMessage,
    ObjectName := _TestName,
    VariableName := 'AssertionListenerMock.AssertionMessage');

Assertion.AssertEquals_STRING(
    Expected := '  Expected = 2222',
    Actual   := AssertionListenerMock.ExpectedAsString,
    ObjectName := _TestName,
    VariableName := 'AssertionListenerMock.ExpectedAsString');

Assertion.AssertEquals_STRING(
    Expected := '  Actual   = 1111',
    Actual   := AssertionListenerMock.ActualAsString,
    ObjectName := _TestName,
    VariableName := 'AssertionListenerMock.ActualAsString');


TestFinished();    ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>