<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="T_TestRunner" Id="{c7f35beb-7079-466d-ae1a-1beb011dea9f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_TestRunner
VAR
    ReloadTests          : BOOL;
    RunTestsSequentially : BOOL := TRUE;
    Run                  : BOOL;
    Reset                : BOOL;
    EnableAllTests       : BOOL;
    DisableAllTests      : BOOL;
    RowIsSelected        : BOOL;
    SelectedRow          : DINT;

    State : (
        Init,
        StartTests,
        RunTests_Concurrently,
        RunTests_Sequentially,
        CheckResults
    );

    i                        : DINT;
    CompletedTestsCount      : DINT;
    FailedTestsCount         : DINT;
    CurrentTestIndex         : DINT;
    TestsCompletedPercentage : LREAL;
    TestCount                : DINT;
    EnabledTestCount         : DINT;
    ResultsSummary           : T_MaxString;

    Tests             : ARRAY[0..MAX_TESTS] OF I_UnitTest;
    AssertionMessages : T_AssertionMessageList;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF RowIsSelected THEN
    ToggleTestEnable(Index := SelectedRow);
    RowIsSelected := FALSE;
END_IF

IF EnableAllTests THEN
    EnableAllTests := FALSE;
    EnableAll();
END_IF

IF DisableAllTests THEN
    DisableAllTests := FALSE;
    DisableAll();
END_IF

CASE State OF
    Init:
        IF Reset THEN
            Reset := FALSE;
            Initialisation();
        END_IF

        IF Run THEN
            Run              := FALSE;
            EnabledTestCount := GetEnabledTestCount();

            IF EnabledTestCount = 0 THEN
                State := CheckResults;
            ELSE
                State := StartTests;
            END_IF
        END_IF

    StartTests:
        IF RunTestsSequentially THEN
            State := RunTests_Sequentially;
        ELSE
            State := RunTests_Concurrently;
        END_IF

    RunTests_Concurrently:
        FOR i := 0 TO TestCount - 1 DO
            Tests[i].Execute();
        END_FOR

        IF EnabledTestCount > 0 THEN
            TestsCompletedPercentage := CompletedTestsCount * 100 / EnabledTestCount;
        END_IF

        ResultsSummary := GetResultsSummary();

        IF CompletedTestsCount >= EnabledTestCount THEN
            State := CheckResults;
        END_IF

    RunTests_Sequentially:
        IF Tests[CurrentTestIndex] <> 0 THEN
            Tests[CurrentTestIndex].Execute();

            IF NOT Tests[CurrentTestIndex].TestEnabled OR Tests[CurrentTestIndex].TestHasFinished THEN
                CurrentTestIndex := CurrentTestIndex + 1;
            END_IF
        END_IF

        IF EnabledTestCount > 0 THEN
            TestsCompletedPercentage := CompletedTestsCount * 100 / EnabledTestCount;
        END_IF

        ResultsSummary := GetResultsSummary();

        IF CurrentTestIndex >= TestCount THEN
            State := CheckResults;
        END_IF

    CheckResults:
        ResultsSummary := GetResultsSummary();
        State          := Init;

END_CASE]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{35bbb33e-58f9-46f6-83b2-7eeb5a0d79dc}" />
    <Folder Name="Properties" Id="{d986fc65-5487-4e94-af74-d63818155f10}" />
    <Method Name="AddTest" Id="{aff2d568-ab55-47bc-af2b-94e85ba5e218}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AddTest : BOOL
VAR_INPUT
    UnitTest : I_UnitTest;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestCount < MAX_TESTS THEN
    UnitTest.TestEnabled := TRUE;
    Tests[TestCount]    := UnitTest;
    TestCount           := TestCount + 1;
    AddTest              := TRUE;
ELSE
    AssertionMessages.AddMessage('Maximum unit tests exceeded!');
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddTestSuite" Id="{9fd86142-9111-4782-8bb5-add73fbdb86e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AddTestSuite : BOOL
VAR_INPUT
    TestSuite : I_TestSuite;
END_VAR
VAR
    i : INT;
    UnitTestToAdd : I_UnitTest;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite.TestCount > 0 THEN
    FOR i := 0 TO TestSuite.TestCount - 1 DO
        UnitTestToAdd := TestSuite.GetTest(i);
        AddTest(UnitTestToAdd);
    END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearTests" Id="{0514e42e-1772-4318-a77d-c71bfad7c3c5}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ClearTests
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO MAX_TESTS DO
    Tests[i] := 0;
END_FOR
TestCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="DisableAll" Id="{26b67286-b38a-473e-94c7-9aa515f07fd2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD DisableAll
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF State = Init THEN
    FOR i := 0 TO MAX_TESTS - 1 DO
        IF Tests[i] <> 0 THEN
            Tests[i].TestEnabled := FALSE;
        END_IF
    END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableAll" Id="{7deaba0d-8d00-4771-a81f-72af7c0b7fce}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD EnableAll
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF State = Init THEN
    FOR i := 0 TO MAX_TESTS - 1 DO
        IF Tests[i] <> 0 THEN
            Tests[i].TestEnabled := TRUE;
        END_IF
    END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnabledTestCount" Id="{eda51e2d-fc5b-45cb-acda-f23875822834}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GetEnabledTestCount : DINT
VAR
    i : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO MAX_TESTS - 1 DO
    IF Tests[i] <> 0 THEN
        IF Tests[i].TestEnabled THEN
            GetEnabledTestCount := GetEnabledTestCount + 1;
        END_IF
    END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetResultsSummary" Id="{a7be1d44-d069-4b8d-bce1-d0edafc24474}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD GetResultsSummary : T_MaxString
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetResultsSummary := F_FormatString3('%d Tests of %d completed, %d Tests Failed',
                            F_DINT(CompletedTestsCount),
                            F_DINT(EnabledTestCount),
                            F_DINT(FailedTestsCount));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialisation" Id="{57179eef-fc7b-4bd0-85fd-730ca5472c60}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Initialisation
VAR_INPUT
END_VAR
VAR
    i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO MAX_TESTS DO
    IF Tests[i] <> 0 THEN
        Tests[i].Initialise(AssertionMessages,
                            CompletedTestsCount := CompletedTestsCount,
                            FailedTestsCount    := FailedTestsCount);
    END_IF
END_FOR

ResultsSummary           := '';
FailedTestsCount         := 0;
CompletedTestsCount      := 0;
TestsCompletedPercentage := 0;
CurrentTestIndex         := 0;
AssertionMessages.Clear();
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ReloadTestsRequest" Id="{8fe8ab6a-5c02-4158-af1a-83e9f9cc4b45}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ReloadTestsRequest : BOOL]]></Declaration>
      <Get Name="Get" Id="{6cc3539e-1a37-4c4c-832d-b7ca4feb8075}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReloadTestsRequest := ReloadTests;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{13f8d37a-40d2-4a17-b6d3-39d8a07a1907}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReloadTestsRequest := ReloadTests;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ToggleTestEnable" Id="{466982a5-d21e-4010-8476-b98928a418f1}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD ToggleTestEnable
VAR_INPUT
    Index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF State = Init THEN
    Tests[Index].TestEnabled := NOT Tests[Index].TestEnabled;
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>