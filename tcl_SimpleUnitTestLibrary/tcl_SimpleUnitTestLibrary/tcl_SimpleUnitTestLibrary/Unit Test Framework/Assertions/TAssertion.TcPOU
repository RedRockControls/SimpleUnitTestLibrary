<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="TAssertion" Id="{a1aef330-5110-4c04-a4ca-af23774823fc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TAssertion
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _AssertionFailed : BOOL;
    _AssertionMessage : T_MaxString;
    _ExpectedAsString : T_MaxString;
    _ActualAsString   : T_MaxString;
    _AssertionListener : IAssertionListener;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{b5309a9f-d22b-4798-ac38-129f27945b0a}" />
    <Folder Name="Properties" Id="{2b96df32-c9bc-482b-8e63-e4930a06246e}" />
    <Method Name="AssertEquals_BLOB" Id="{5eddac7b-ac1b-4f82-81db-408d888c0c87}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BLOB
VAR_INPUT
    Expected : ANY;
    Actual   : ANY;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected.diSize <> Actual.diSize THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BLOB failed in %s: Value "%s"', _AssertionListener.TestName, 'Blob.Size');
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DINT(Expected.diSize));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DINT(Actual.diSize));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
    
ELSIF Expected.TypeClass <> Actual.TypeClass THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BLOB failed in %s: Value "%s"', _AssertionListener.TestName, 'Blob.TypeClass');
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', F_TypeClassToString(Expected.TypeClass));
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', F_TypeClassToString(Actual.TypeClass));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
    
ELSIF 
    MEMCMP(
        pBuf1 := Expected.pValue, 
        pBuf2 := Actual.pValue, 
        n     := DINT_TO_UDINT(Actual.diSize)) <> 0
THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx1('AssertEquals_BLOB failed in %s: Contents differ', _AssertionListener.TestName);
    _ExpectedAsString := '';
    _ActualAsString   := '';
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BOOL" Id="{cdb21bbb-0bd7-498a-af51-940faf207ee6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BOOL 
VAR_INPUT
    Expected : BOOL;
    Actual   : BOOL;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BOOL failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', BOOL_TO_STRING(Expected));
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', BOOL_TO_STRING(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed   := FALSE;
    _AssertionMessage  := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BYTE" Id="{5627dd17-70c5-4b14-a1bf-829486f72942}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BYTE
VAR_INPUT
    Expected : BYTE;
    Actual   : BYTE;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BYTE failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_BYTE(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_BYTE(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DINT" Id="{87caa963-e045-4af5-b563-b93e89f13ab7}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_DINT 
VAR_INPUT
    Expected : DINT;
    Actual   : DINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_DINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DWORD" Id="{c529b418-e73e-46df-a704-66f342e91550}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_DWORD
VAR_INPUT
    Expected : DWORD;
    Actual   : DWORD;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_DWORD failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DWORD(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DWORD(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INT" Id="{c0c3c3aa-4593-4e55-9ebd-e3ee2109a1e7}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_INT
VAR_INPUT
    Expected : INT;
    Actual   : INT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_INT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_INT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_INT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INTERFACE" Id="{ce87012c-197c-4a78-affa-13f11a2dba98}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_INTERFACE 
VAR_INPUT
    Expected : __SYSTEM.IQueryInterface;
    Actual   : __SYSTEM.IQueryInterface;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_INTERFACE failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := '  Interfaces Differ';
    _ActualAsString   := '';
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LINT" Id="{b8ab4fb5-6328-4a4b-8c8c-bd80dd43a6a9}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_LINT 
VAR_INPUT
    Expected : LINT;
    Actual   : LINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_LINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_LINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_LINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LREAL" Id="{f1277f7a-01b7-4851-9eec-4f607faba189}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_LREAL 
VAR_INPUT
    Expected : LREAL;
    Actual   : LREAL;
    Delta    : LREAL;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) > Delta THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_LREAL failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %f', F_LREAL(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %f', F_LREAL(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_PVOID" Id="{55fd3806-f310-4c32-9658-04dd1567b98f}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_PVOID 
VAR_INPUT
    Expected : PVOID;
    Actual   : PVOID;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_PVOID failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_PVOID(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_PVOID(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_REAL" Id="{a0cf997f-5108-4a78-83dd-2d3cf9cf0251}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_REAL 
VAR_INPUT
    Expected : REAL;
    Actual   : REAL;
    Delta    : REAL;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) > Delta THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_REAL failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %f', F_REAL(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %f', F_REAL(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_STRING" Id="{bc26e0ad-c421-4d8e-b875-daeab2504431}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_STRING
VAR_INPUT
    Expected : T_MaxString;
    Actual   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_STRING failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', Expected);
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', Actual);
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed   := FALSE;
    _AssertionMessage  := '';
    _ExpectedAsString  := '';
    _ActualAsString    := '';
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UDINT" Id="{b3c4b76b-bd0f-48fc-9f1f-c334e6dc6e9c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_UDINT
VAR_INPUT
    Expected : UDINT;
    Actual   : UDINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_UDINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_UDINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_UDINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UINT" Id="{64db6b8d-987c-4ac1-b2ab-42a4e606ae68}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_UINT
VAR_INPUT
    Expected : UINT;
    Actual   : UINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_UINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_UINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_UINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_ULINT" Id="{35d1cf8d-e453-4bd0-b422-61ed4fb64747}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_ULINT 
VAR_INPUT
    Expected : ULINT;
    Actual   : ULINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_ULINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_ULINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_ULINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_WORD" Id="{6f951036-653a-4769-ad9d-5558c6f5e476}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_WORD
VAR_INPUT
    Expected : WORD;
    Actual   : WORD;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_WORD failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_WORD(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_WORD(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="AssertionFailed" Id="{efe5b392-bd52-4186-adc6-a08baeb9456e}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AssertionFailed : BOOL]]></Declaration>
      <Get Name="Get" Id="{58033276-2b54-4cf0-846a-6cb8d1dec6d1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AssertionFailed := _AssertionFailed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AssertionMessage" Id="{450e3501-7d12-45c4-a5bf-d12c3afea520}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AssertionMessage : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{fe321a98-402a-43fe-9184-70844f27500e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AssertionMessage := _AssertionMessage;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{bd8897b6-ec9e-4893-99bd-6b87d14568ef}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    AssertionListener : IAssertionListener;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_AssertionListener := AssertionListener;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>