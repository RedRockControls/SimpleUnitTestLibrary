<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="TAssertion" Id="{caed79f5-0913-445c-a87a-bb4aa779b904}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TAssertion
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _AssertionFailed : BOOL;
    _AssertionMessage : T_MaxString;
    _ExpectedAsString : T_MaxString;
    _ActualAsString   : T_MaxString;
    _AssertionListener : IAssertionListener;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AssertEquals_BLOB" Id="{0f6c7a79-2000-4afe-81e5-4220c4dec593}">
      <Declaration><![CDATA[METHOD AssertEquals_BLOB
VAR_INPUT
    Expected : ANY;
    Actual   : ANY;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected.diSize <> Actual.diSize THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BLOB failed in %s: Value "%s"', ObjectName, 'Blob.Size');
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DINT(Expected.diSize));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DINT(Actual.diSize));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
    
ELSIF Expected.TypeClass <> Actual.TypeClass THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BLOB failed in %s: Value "%s"', ObjectName, 'Blob.TypeClass');
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', F_TypeClassToString(Expected.TypeClass));
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', F_TypeClassToString(Actual.TypeClass));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
    
ELSIF 
    MEMCMP(
        pBuf1 := Expected.pValue, 
        pBuf2 := Actual.pValue, 
        n     := DINT_TO_UDINT(Actual.diSize)) <> 0
THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx1('AssertEquals_BLOB failed in %s: Contents differ', ObjectName);
    _ExpectedAsString := '';
    _ActualAsString   := '';
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BOOL" Id="{bfb1bf4c-13bc-4f64-aa54-a5b3fd104a2b}">
      <Declaration><![CDATA[METHOD AssertEquals_BOOL 
VAR_INPUT
    Expected : BOOL;
    Actual   : BOOL;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BOOL failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', BOOL_TO_STRING(Expected));
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', BOOL_TO_STRING(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed   := FALSE;
    _AssertionMessage  := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BYTE" Id="{31bbb8ae-46c5-43f6-a003-e340c8ae5f5d}">
      <Declaration><![CDATA[METHOD AssertEquals_BYTE
VAR_INPUT
    Expected : BYTE;
    Actual   : BYTE;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BYTE failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_BYTE(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_BYTE(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DINT" Id="{9d1aece1-e0df-4b5d-b6eb-97cc996bc769}">
      <Declaration><![CDATA[METHOD AssertEquals_DINT 
VAR_INPUT
    Expected : DINT;
    Actual   : DINT;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_DINT failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DWORD" Id="{6358c12b-8dab-4ad3-8a1f-fa895f224bfc}">
      <Declaration><![CDATA[METHOD AssertEquals_DWORD
VAR_INPUT
    Expected : DWORD;
    Actual   : DWORD;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_DWORD failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DWORD(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DWORD(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INT" Id="{36f1f973-31c9-4f78-a74b-8fd9126e5abf}">
      <Declaration><![CDATA[METHOD AssertEquals_INT
VAR_INPUT
    Expected : INT;
    Actual   : INT;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_INT failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_INT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_INT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INTERFACE" Id="{0ff0c871-f947-4543-bb3b-38181a429923}">
      <Declaration><![CDATA[METHOD AssertEquals_INTERFACE 
VAR_INPUT
    Expected : __SYSTEM.IQueryInterface;
    Actual   : __SYSTEM.IQueryInterface;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_INTERFACE failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := '  Interfaces Differ';
    _ActualAsString   := '';
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LINT" Id="{0a941d65-ccf2-402f-b0d3-dbfab7fea3fc}">
      <Declaration><![CDATA[METHOD AssertEquals_LINT 
VAR_INPUT
    Expected : LINT;
    Actual   : LINT;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_LINT failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_LINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_LINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LREAL" Id="{6c536e4d-910a-4e32-beb7-0b77d99d5e85}">
      <Declaration><![CDATA[METHOD AssertEquals_LREAL 
VAR_INPUT
    Expected : LREAL;
    Actual   : LREAL;
    Delta    : LREAL;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) >= Delta THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_LREAL failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %f', F_LREAL(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %f', F_LREAL(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_PVOID" Id="{f0565238-8b3b-4bb9-b982-8b5ce51c6155}">
      <Declaration><![CDATA[METHOD AssertEquals_PVOID 
VAR_INPUT
    Expected : PVOID;
    Actual   : PVOID;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_PVOID failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_PVOID(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_PVOID(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_REAL" Id="{450d5898-18a3-43cd-9040-287a6934c864}">
      <Declaration><![CDATA[METHOD AssertEquals_REAL 
VAR_INPUT
    Expected : REAL;
    Actual   : REAL;
    Delta    : REAL;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) >= Delta THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_REAL failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %f', F_REAL(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %f', F_REAL(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_STRING" Id="{afd1aa75-e202-4335-a60e-746ced8231d1}">
      <Declaration><![CDATA[METHOD AssertEquals_STRING
VAR_INPUT
    Expected : T_MaxString;
    Actual   : T_MaxString;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_STRING failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', Expected);
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', Actual);
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed   := FALSE;
    _AssertionMessage  := '';
    _ExpectedAsString  := '';
    _ActualAsString    := '';
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UDINT" Id="{0c5e25c6-c986-4627-bd67-08488e6c01f6}">
      <Declaration><![CDATA[METHOD AssertEquals_UDINT
VAR_INPUT
    Expected : UDINT;
    Actual   : UDINT;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_UDINT failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_UDINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_UDINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UINT" Id="{f08363b8-bd01-4fc6-92c5-e52fbf5ee69d}">
      <Declaration><![CDATA[METHOD AssertEquals_UINT
VAR_INPUT
    Expected : UINT;
    Actual   : UINT;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_UINT failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_UINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_UINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_ULINT" Id="{f8538d60-8dc2-4a58-b5d0-c4dae5ddceb9}">
      <Declaration><![CDATA[METHOD AssertEquals_ULINT 
VAR_INPUT
    Expected : ULINT;
    Actual   : ULINT;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_ULINT failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_ULINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_ULINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_WORD" Id="{6e9a3616-b7a2-4cc7-99ea-af3ab425785c}">
      <Declaration><![CDATA[METHOD AssertEquals_WORD
VAR_INPUT
    Expected : WORD;
    Actual   : WORD;
    ObjectName   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_WORD failed in %s: Value "%s"', ObjectName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_WORD(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_WORD(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="AssertionFailed" Id="{486c0814-3279-42af-887b-f303dcd4c338}">
      <Declaration><![CDATA[PROPERTY AssertionFailed : BOOL]]></Declaration>
      <Get Name="Get" Id="{4d7f56ef-8fa5-4816-a95b-e1724fd112c7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AssertionFailed := _AssertionFailed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AssertionMessage" Id="{66b6b347-6ea2-48bc-a050-849df0c94cbd}">
      <Declaration><![CDATA[PROPERTY AssertionMessage : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{5f44df8d-013e-4f4f-90ee-cd898eb8f0fa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AssertionMessage := _AssertionMessage;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{28a8cb85-bae9-4f3a-a41d-8f9cf73df679}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    AssertionListener : IAssertionListener;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_AssertionListener := AssertionListener;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>