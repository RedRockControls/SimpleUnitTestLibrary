<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="TUnitTestBase" Id="{11d674d7-44eb-41b0-9d82-8296e52558c5}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK ABSTRACT TUnitTestBase IMPLEMENTS IUnitTest, IAssertionListener
VAR
    {attribute 'instance-path'} 
    {attribute 'no_init'}
    _TestName       : T_MaxString; // Automatically initialised with the full name of the instance
    _TestFailed     : BOOL;
    _TestFinished   : BOOL;
    _ImageRef       : STRING;
    _MessageList    : IAssertionMessageList;
    
    Assertion : TAssertion(AssertionListener := THIS^); // Callback to allow the Assertion to update the message list on assertion failed

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{2a54b672-815d-4dbb-9596-7d067b0ed961}" />
    <Folder Name="Properties" Id="{64501ea8-f895-4de8-96e6-bf3636e8f3a0}" />
    <Method Name="Execute" Id="{e8763835-464a-4d4d-91b6-bfd6399d248c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Execute
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{d80ab3c1-8238-4897-a324-064f979df65c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    TestSuite : ITestSuite;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF TestSuite <> 0 THEN
    IF NOT bInCopyCode THEN // not an online change...
        THIS^.setTestName(TestSuite.Name);
        TestSuite.AddTest(THIS^);
    END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialise" Id="{1fd7cd17-bea4-4e1a-b8bf-80b7d6405b5d}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Initialise
VAR_INPUT
    MessageList : IAssertionMessageList;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_TestFailed   := FALSE;
_TestFinished := FALSE;
_ImageRef     := '0';
_MessageList  := MessageList;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAssertionFailed" Id="{b43c6d95-c832-4291-957a-0e675f31c612}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD OnAssertionFailed
VAR_INPUT
    AssertionMessage : T_MaxString;
    ExpectedAsString : T_MaxString;
    ActualAsString   : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_TestFailed := TRUE;
_MessageList.AddMessage(AssertionMessage);

IF ExpectedAsString <> '' THEN
    _MessageList.AddMessage(ExpectedAsString);
END_IF

IF ActualAsString <> '' THEN
    _MessageList.AddMessage(ActualAsString);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="setTestName" Id="{fec2f039-d20a-446b-ab3c-1706e19fed00}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD setTestName
VAR_INPUT
    GroupName : STRING;
END_VAR
VAR
    StringSplitter : TStringSplitter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StringSplitter.Init(
    Str := _TestName,
    Delim1 := '.',
    Delim2 := '');
    
WHILE StringSplitter.HasMore() DO
    _TestName := StringSplitter.GetNext(); // to get last sub-section
END_WHILE

IF GroupName <> '' THEN
    _TestName := F_FormatStringEx2(Format := '%s.%s',arg1 := GroupName, arg2 := _TestName);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestFinished" Id="{40b90338-ccd7-407f-9078-9dcc2e61646e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD TestFinished
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_TestFinished := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TestHasFailed" Id="{e8961bd2-de9d-4010-8548-1cceef09004c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TestHasFailed : BOOL]]></Declaration>
      <Get Name="Get" Id="{e17559eb-15a0-4f15-84b4-2493bb01c2cf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TestHasFailed := _TestFailed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TestHasFinished" Id="{dae0aebe-3ba8-4510-96d3-a8ee6264162b}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TestHasFinished : BOOL]]></Declaration>
      <Get Name="Get" Id="{2d5df8bd-e844-4bab-8f07-4a4d5c6b8528}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TestHasFinished := _TestFinished;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="TestName" Id="{893d82b5-1201-4b73-be87-a5de58f69a15}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY TestName : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{1c2bbf5c-1242-4e3d-92c6-d2340060f9da}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TestName := _TestName;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>