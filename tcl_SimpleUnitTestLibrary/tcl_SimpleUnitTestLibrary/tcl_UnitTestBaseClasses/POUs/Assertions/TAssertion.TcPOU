<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="TAssertion" Id="{70ae2ff2-4bf3-4e3b-bfb8-f054741d764d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TAssertion
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
    _AssertionFailed : BOOL;
    _AssertionMessage : T_MaxString;
    _ExpectedAsString : T_MaxString;
    _ActualAsString   : T_MaxString;
    _AssertionListener : IAssertionListener;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{54751508-b967-45e0-bbbe-d141e6a7186a}" />
    <Folder Name="Properties" Id="{9c0c29ae-3807-4b44-8594-bf7ccc58695f}" />
    <Method Name="AssertEquals_BLOB" Id="{c8008f7a-1f17-45ba-8b5b-5d24e1c46afb}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BLOB
VAR_INPUT
    Expected : ANY;
    Actual   : ANY;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected.diSize <> Actual.diSize THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BLOB failed in %s: Value "%s"', _AssertionListener.TestName, 'Blob.Size');
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DINT(Expected.diSize));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DINT(Actual.diSize));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
    
ELSIF Expected.TypeClass <> Actual.TypeClass THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BLOB failed in %s: Value "%s"', _AssertionListener.TestName, 'Blob.TypeClass');
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', F_TypeClassToString(Expected.TypeClass));
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', F_TypeClassToString(Actual.TypeClass));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
    
ELSIF 
    MEMCMP(
        pBuf1 := Expected.pValue, 
        pBuf2 := Actual.pValue, 
        n     := DINT_TO_UDINT(Actual.diSize)) <> 0
THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx1('AssertEquals_BLOB failed in %s: Contents differ', _AssertionListener.TestName);
    _ExpectedAsString := '';
    _ActualAsString   := '';
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BOOL" Id="{9d0f876a-a0ba-4256-91ec-8535acd308e3}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BOOL 
VAR_INPUT
    Expected : BOOL;
    Actual   : BOOL;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BOOL failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', BOOL_TO_STRING(Expected));
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', BOOL_TO_STRING(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed   := FALSE;
    _AssertionMessage  := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BYTE" Id="{96bd7269-e286-4f6f-a820-200693391656}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_BYTE
VAR_INPUT
    Expected : BYTE;
    Actual   : BYTE;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_BYTE failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_BYTE(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_BYTE(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DINT" Id="{b14ee64c-ab19-485c-8d57-e669c3bff199}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_DINT 
VAR_INPUT
    Expected : DINT;
    Actual   : DINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_DINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DWORD" Id="{d6e7a204-64a3-4f0a-ace3-e0577c8bdcc2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_DWORD
VAR_INPUT
    Expected : DWORD;
    Actual   : DWORD;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_DWORD failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_DWORD(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_DWORD(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INT" Id="{f0ecc7d4-f9a4-4160-9e6b-1b281e2673e6}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_INT
VAR_INPUT
    Expected : INT;
    Actual   : INT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_INT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_INT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_INT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INTERFACE" Id="{e805b2f5-955e-4cd5-aafa-5a7bd9ecec72}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_INTERFACE 
VAR_INPUT
    Expected : __SYSTEM.IQueryInterface;
    Actual   : __SYSTEM.IQueryInterface;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_INTERFACE failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := '  Interfaces Differ';
    _ActualAsString   := '';
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LINT" Id="{e4eae7f2-3cf9-4ac3-8f98-5c0ed3a8135e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_LINT 
VAR_INPUT
    Expected : LINT;
    Actual   : LINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_LINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_LINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_LINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LREAL" Id="{52757116-fb57-4c17-aed0-d4f7d29fd12a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_LREAL 
VAR_INPUT
    Expected : LREAL;
    Actual   : LREAL;
    Delta    : LREAL;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) >= Delta THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_LREAL failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %f', F_LREAL(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %f', F_LREAL(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_PVOID" Id="{b66008b0-8461-4d8b-bb67-c916aa0bba8b}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_PVOID 
VAR_INPUT
    Expected : PVOID;
    Actual   : PVOID;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_PVOID failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_PVOID(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_PVOID(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_REAL" Id="{7471d00d-7be3-4a98-ac99-78f379f3861c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_REAL 
VAR_INPUT
    Expected : REAL;
    Actual   : REAL;
    Delta    : REAL;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(Expected - Actual) >= Delta THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_REAL failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %f', F_REAL(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %f', F_REAL(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_STRING" Id="{77d6d663-2bf0-4bee-86c6-108a80d75019}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_STRING
VAR_INPUT
    Expected : T_MaxString;
    Actual   : T_MaxString;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_STRING failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatStringEx1('  Expected = %s', Expected);
    _ActualAsString   := F_FormatStringEx1('  Actual   = %s', Actual);
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed   := FALSE;
    _AssertionMessage  := '';
    _ExpectedAsString  := '';
    _ActualAsString    := '';
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UDINT" Id="{6396b211-a968-42e9-9a4b-399eb8fd426c}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_UDINT
VAR_INPUT
    Expected : UDINT;
    Actual   : UDINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_UDINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_UDINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_UDINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UINT" Id="{39cb565a-8ddb-455c-927c-14271842b8e8}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_UINT
VAR_INPUT
    Expected : UINT;
    Actual   : UINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_UINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_UINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_UINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_ULINT" Id="{25d38aa7-e152-405a-8d53-29ffa7a1451e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_ULINT 
VAR_INPUT
    Expected : ULINT;
    Actual   : ULINT;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed  := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_ULINT failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_ULINT(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_ULINT(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_WORD" Id="{4f205e55-d96b-4590-a693-749ac097c639}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD AssertEquals_WORD
VAR_INPUT
    Expected : WORD;
    Actual   : WORD;
    VariableName : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Expected <> Actual THEN
    _AssertionFailed := TRUE;
    _AssertionMessage := F_FormatStringEx2('AssertEquals_WORD failed in %s: Value "%s"', _AssertionListener.TestName, VariableName);
    _ExpectedAsString := F_FormatString1('  Expected = %d', F_WORD(Expected));
    _ActualAsString   := F_FormatString1('  Actual   = %d', F_WORD(Actual));
    _AssertionListener.OnAssertionFailed(_AssertionMessage,_ExpectedAsString,_ActualAsString);
ELSE
    _AssertionFailed  := FALSE;
    _AssertionMessage := '';
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="AssertionFailed" Id="{0d444132-37a9-4ec0-9884-356cdc1efa83}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AssertionFailed : BOOL]]></Declaration>
      <Get Name="Get" Id="{928450fb-8704-4b55-a97c-1981f0fc406d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AssertionFailed := _AssertionFailed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AssertionMessage" Id="{a744bcb1-3481-41a4-a14e-e42ed7cf66fc}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY AssertionMessage : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{cf09b7f4-0306-476e-b30a-c278f1d2d6e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AssertionMessage := _AssertionMessage;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{4071ef20-0d0f-4fe8-b227-bc8bccfe5815}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    AssertionListener : IAssertionListener;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_AssertionListener := AssertionListener;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>